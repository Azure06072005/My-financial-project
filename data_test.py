import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import os

def create_sample_financial_excel():
    """Create a sample Excel file with Vietnamese financial data"""
    
    # Create quarters
    quarters = ['Q1 2023', 'Q2 2023', 'Q3 2023', 'Q4 2023', 'Q1 2024']
    
    # CDKT Data (Balance Sheet)
    cdkt_data = {
        'Ch·ªâ ti√™u': [
            'T√ÄI S·∫¢N',
            'T√ÄI S·∫¢N NG·∫ÆN H·∫†N',
            'Ti·ªÅn v√† c√°c kho·∫£n t∆∞∆°ng ƒë∆∞∆°ng',
            'ƒê·∫ßu t∆∞ ng·∫Øn h·∫°n',
            'Ph·∫£i thu ng·∫Øn h·∫°n',
            'H√†ng t·ªìn kho',
            'T√ÄI S·∫¢N D√ÄI H·∫†N',
            'T√†i s·∫£n c·ªë ƒë·ªãnh h·ªØu h√¨nh',
            'ƒê·∫ßu t∆∞ d√†i h·∫°n',
            'N·ª¢ PH·∫¢I TR·∫¢',
            'N·ª£ ng·∫Øn h·∫°n',
            'N·ª£ d√†i h·∫°n',
            'V·ªêN CH·ª¶ S·ªû H·ªÆU',
            'V·ªën g√≥p c·ªßa ch·ªß s·ªü h·ªØu',
            'L·ª£i nhu·∫≠n sau thu·∫ø ch∆∞a ph√¢n ph·ªëi'
        ],
        'Q1 2023': [2850000, 1850000, 450000, 200000, 680000, 520000, 1000000, 800000, 200000, 1200000, 800000, 400000, 1650000, 1000000, 650000],
        'Q2 2023': [2920000, 1920000, 520000, 180000, 720000, 500000, 1000000, 820000, 180000, 1250000, 850000, 400000, 1670000, 1000000, 670000],
        'Q3 2023': [3100000, 2000000, 580000, 220000, 750000, 450000, 1100000, 900000, 200000, 1300000, 900000, 400000, 1800000, 1000000, 800000],
        'Q4 2023': [3250000, 2150000, 650000, 250000, 800000, 450000, 1100000, 920000, 180000, 1350000, 950000, 400000, 1900000, 1000000, 900000],
        'Q1 2024': [3400000, 2250000, 720000, 280000, 850000, 400000, 1150000, 950000, 200000, 1400000, 1000000, 400000, 2000000, 1000000, 1000000]
    }
    
    # KQKD Data (Income Statement)
    kqkd_data = {
        'Ch·ªâ ti√™u': [
            'DOANH THU THU·∫¶N',
            'Doanh thu b√°n h√†ng',
            'C√°c kho·∫£n gi·∫£m tr·ª´',
            'GI√Å V·ªêN H√ÄNG B√ÅN',
            'L·ª¢I NHU·∫¨N G·ªòP',
            'Chi ph√≠ b√°n h√†ng',
            'Chi ph√≠ qu·∫£n l√Ω doanh nghi·ªáp',
            'L·ª¢I NHU·∫¨N THU·∫¶N T·ª™ HO·∫†T ƒê·ªòNG',
            'Thu nh·∫≠p kh√°c',
            'Chi ph√≠ kh√°c',
            'L·ª¢I NHU·∫¨N TR∆Ø·ªöC THU·∫æ',
            'Chi ph√≠ thu·∫ø thu nh·∫≠p doanh nghi·ªáp',
            'L·ª¢I NHU·∫¨N SAU THU·∫æ'
        ],
        'Q1 2023': [1800000, 1850000, 50000, 1200000, 600000, 180000, 150000, 270000, 20000, 15000, 275000, 55000, 220000],
        'Q2 2023': [1950000, 2000000, 50000, 1300000, 650000, 195000, 160000, 295000, 25000, 18000, 302000, 60400, 241600],
        'Q3 2023': [2100000, 2150000, 50000, 1400000, 700000, 210000, 170000, 320000, 30000, 20000, 330000, 66000, 264000],
        'Q4 2023': [2200000, 2250000, 50000, 1450000, 750000, 220000, 180000, 350000, 35000, 22000, 363000, 72600, 290400],
        'Q1 2024': [2300000, 2350000, 50000, 1500000, 800000, 230000, 190000, 380000, 40000, 25000, 395000, 79000, 316000]
    }
    
    # CSTC Data (Financial Ratios)
    cstc_data = {
        'Ch·ªâ ti√™u': [
            'CH·ªà S·ªê THANH TO√ÅN',
            'H·ªá s·ªë thanh to√°n hi·ªán h√†nh',
            'H·ªá s·ªë thanh to√°n nhanh',
            'H·ªá s·ªë thanh to√°n ti·ªÅn m·∫∑t',
            'CH·ªà S·ªê HO·∫†T ƒê·ªòNG',
            'V√≤ng quay h√†ng t·ªìn kho',
            'V√≤ng quay ph·∫£i thu',
            'V√≤ng quay t√†i s·∫£n',
            'CH·ªà S·ªê ƒê√íN B·∫®Y',
            'H·ªá s·ªë n·ª£ tr√™n t√†i s·∫£n',
            'H·ªá s·ªë n·ª£ tr√™n v·ªën ch·ªß s·ªü h·ªØu',
            'H·ªá s·ªë kh·∫£ nƒÉng thanh to√°n l√£i vay',
            'CH·ªà S·ªê SINH L·ªúI',
            'ROA (%)',
            'ROE (%)',
            'T·ª∑ su·∫•t l·ª£i nhu·∫≠n g·ªôp (%)',
            'T·ª∑ su·∫•t l·ª£i nhu·∫≠n r√≤ng (%)'
        ],
        'Q1 2023': ['', 2.31, 1.66, 0.56, '', 2.31, 2.65, 0.63, '', 0.42, 0.73, 18.33, '', 7.72, 13.33, 33.33, 12.22],
        'Q2 2023': ['', 2.26, 1.67, 0.61, '', 2.60, 2.71, 0.67, '', 0.43, 0.75, 19.67, '', 8.27, 14.47, 33.33, 12.39],
        'Q3 2023': ['', 2.22, 1.72, 0.64, '', 3.11, 2.80, 0.68, '', 0.42, 0.72, 21.33, '', 8.52, 14.67, 33.33, 12.57],
        'Q4 2023': ['', 2.26, 1.79, 0.68, '', 3.22, 2.75, 0.68, '', 0.42, 0.71, 23.53, '', 8.94, 15.28, 34.09, 13.20],
        'Q1 2024': ['', 2.25, 1.85, 0.72, '', 3.75, 2.71, 0.68, '', 0.41, 0.70, 25.33, '', 9.29, 15.80, 34.78, 13.74]
    }
    
    # Create DataFrames
    df_cdkt = pd.DataFrame(cdkt_data).set_index('Ch·ªâ ti√™u')
    df_kqkd = pd.DataFrame(kqkd_data).set_index('Ch·ªâ ti√™u')
    df_cstc = pd.DataFrame(cstc_data).set_index('Ch·ªâ ti√™u')
    
    # Create Excel workbook
    wb = Workbook()
    
    # Remove default sheet
    wb.remove(wb.active)
    
    # Add CDKT sheet
    ws_cdkt = wb.create_sheet('CDKT')
    # Add 5 empty rows (data starts at row 6)
    for i in range(5):
        ws_cdkt.append([''] * 6)
    # Add headers and data
    ws_cdkt.append(['Ch·ªâ ti√™u'] + list(df_cdkt.columns))
    for row in dataframe_to_rows(df_cdkt, index=True, header=False):
        ws_cdkt.append(row)
    
    # Add KQKD sheet
    ws_kqkd = wb.create_sheet('KQKD')
    # Add 5 empty rows
    for i in range(5):
        ws_kqkd.append([''] * 6)
    # Add headers and data
    ws_kqkd.append(['Ch·ªâ ti√™u'] + list(df_kqkd.columns))
    for row in dataframe_to_rows(df_kqkd, index=True, header=False):
        ws_kqkd.append(row)
    
    # Add CSTC sheet
    ws_cstc = wb.create_sheet('CSTC')
    # Add 5 empty rows
    for i in range(5):
        ws_cstc.append([''] * 6)
    # Add headers and data
    ws_cstc.append(['Ch·ªâ ti√™u'] + list(df_cstc.columns))
    for row in dataframe_to_rows(df_cstc, index=True, header=False):
        ws_cstc.append(row)
    
    # Save the file
    filename = 'HPG_hn_Q2_2025.xlsx'
    wb.save(filename)
    
    print(f"‚úÖ Sample Excel file created: {filename}")
    print(f"üìÅ Location: {os.path.abspath(filename)}")
    print(f"üìä Sheets included: CDKT, KQKD, CSTC")
    print(f"üí° This file is ready to test with your Flask application!")
    
    # Show file info
    file_size = os.path.getsize(filename) / 1024  # KB
    print(f"üìè File size: {file_size:.1f} KB")
    
    return filename

def create_simple_version():
    """Create a simpler version with just essential data"""
    
    # Create a simpler structure
    simple_data = {
        'CDKT': {
            'Ch·ªâ ti√™u': ['T√†i s·∫£n', 'N·ª£ ph·∫£i tr·∫£', 'V·ªën ch·ªß s·ªü h·ªØu'],
            'Q1 2024': [1000000, 400000, 600000],
            'Q2 2024': [1200000, 450000, 750000]
        },
        'KQKD': {
            'Ch·ªâ ti√™u': ['Doanh thu', 'Chi ph√≠', 'L·ª£i nhu·∫≠n'],
            'Q1 2024': [500000, 350000, 150000],
            'Q2 2024': [600000, 400000, 200000]
        },
        'CSTC': {
            'Ch·ªâ ti√™u': ['ROA (%)', 'ROE (%)', 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n (%)'],
            'Q1 2024': [15.0, 25.0, 30.0],
            'Q2 2024': [16.7, 26.7, 33.3]
        }
    }
    
    with pd.ExcelWriter('Simple_Financial_Data.xlsx', engine='openpyxl') as writer:
        for sheet_name, data in simple_data.items():
            df = pd.DataFrame(data).set_index('Ch·ªâ ti√™u')
            df.to_excel(writer, sheet_name=sheet_name, startrow=5)
    
    print("‚úÖ Simple Excel file created: Simple_Financial_Data.xlsx")

if __name__ == "__main__":
    print("üèóÔ∏è  Creating sample financial Excel files...\n")
    
    # Create full version
    create_sample_financial_excel()
    print()
    
    # Create simple version
    create_simple_version()
    
    print("\nüéØ Instructions:")
    print("1. Use either file to test your Flask application")
    print("2. Upload the file through your React frontend")
    print("3. The data should process correctly and display in tables")
    print("\nüí° Both files follow the exact format expected by your dataframe.py logic!")